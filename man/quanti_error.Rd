% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quanti_error.R
\name{quanti_error}
\alias{quanti_error}
\title{Compututation of the empirical quantization error}
\usage{
quanti_error(
  data = NULL,
  prototypes,
  density_ratio,
  batch_size = NULL,
  distance_func = function(A1, A2) {
     return(sqrt(sum((A1 - A2)^2)))
 },
  inputs = NULL,
  outputs_function = NULL,
  method_IS = "unique",
  sampling_cells = 1:length(data)
)
}
\arguments{
\item{data}{The data that needs to be quantized. An array of any dimension is expected, the kth element must be selected with data[,..,k]. Useful only if inputs == NULL.}

\item{prototypes}{A set of prototypes. Useful only if cell_numbers == NULL.}

\item{density_ratio}{density_ratio indicates the weight fX/g of each data element.}

\item{batch_size}{If the computation is by batch, the number of elements by batch. Optional.}

\item{distance_func}{A function computing a distance between two data elements. Useful only if cell_numbers == NULL.}

\item{inputs}{If data is not provided, inputs is a dataframe of the inputs at which the outputs will be computed.}

\item{outputs_function}{Function to compute the outputs from the inputs.}

\item{method_IS}{The method of Importance Sampling : "unique" means there is a unique biased density involved, "percell" means there is one biased density (and then one biased sample) for each cell.}

\item{sampling_cells}{If method == "percell" and data is provided, sampling_cells is a vector indicating for each cell, the index element of data associated to this cell.}
}
\value{
An estimation of the quantization error
}
\description{
Compututation of the empirical quantization error
}
\examples{
prototypes = list(array(10, dim = c(3,3)), array(5, dim = c(3,3)), array(6, dim = c(3,3)))
data = array(runif(9*20)*20, dim = c(3,3,20))
density_ratio = rep(1,20)
distance_func = function(A1,A2){return(sqrt(sum((A1-A2)^2)))}
quanti_error(data = data, prototypes = prototypes, density_ratio = density_ratio,
distance_func = distance_func)
}
